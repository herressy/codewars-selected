# Write the function that parses the mileage number input, and returns a 2 if the number is "interesting" (see below), 
# a 1 if an interesting number occurs within the next two miles, or a 0 if the number is not interesting.

# Interesting numbers are 3-or-more digit numbers that meet one or more of the following criteria:

# Any digit followed by all zeros: 100, 90000
# Every digit is the same number: 1111
# The digits are sequential, incementing†: 1234
# The digits are sequential, decrementing‡: 4321
# The digits are a palindrome: 1221 or 73837
# The digits match one of the values in the awesome_phrases array
# † For incrementing sequences, 0 should come after 9, and not before 1, as in 7890.
# ‡ For decrementing sequences, 0 should come after 1, and not before 9, as in 3210.

# So, you should expect these inputs and outputs:

# # "boring" numbers
# is_interesting(3, [1337, 256])    # 0
# is_interesting(3236, [1337, 256]) # 0

# # progress as we near an "interesting" number
# is_interesting(11207, []) # 0
# is_interesting(11208, []) # 0
# is_interesting(11209, []) # 1
# is_interesting(11210, []) # 1
# is_interesting(11211, []) # 2

# # nearing a provided "awesome phrase"
# is_interesting(1335, [1337, 256]) # 1
# is_interesting(1336, [1337, 256]) # 1
# is_interesting(1337, [1337, 256]) # 2


def zeros(x):
    return set(x[1:]) == set('0')

def sequence(x):
    return x in '1234567890' or x in '9876543210'

def palindrome(x):
    return x == x[::-1]

def awesome(x, awesome_phrases):
    return x in [str(i) for i in awesome_phrases]

def is_interesting(number, awesome_phrases):
    n = str(number)
    if number > 97:
        if number > 99 and any([zeros(n), sequence(n), palindrome(n), awesome(n, awesome_phrases)]):
            return 2
        for i in str(number + 1), str(number + 2):
            if any([zeros(i), sequence(i), palindrome(i), awesome(i, awesome_phrases)]):
                return 1
    return 0