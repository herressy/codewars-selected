# Alright, detective, one of our colleagues successfully observed our target person, Robby the robber. 
# We followed him to a secret warehouse, where we assume to find all the stolen stuff. 
# The door to this warehouse is secured by an electronic combination lock. 
# Unfortunately our spy isn't sure about the PIN he saw, when Robby entered it.

# The keypad has the following layout:

# ┌───┬───┬───┐
# │ 1 │ 2 │ 3 │
# ├───┼───┼───┤
# │ 4 │ 5 │ 6 │
# ├───┼───┼───┤
# │ 7 │ 8 │ 9 │
# └───┼───┼───┘
#     │ 0 │
#     └───┘
# He noted the PIN 1357, but he also said, it is possible that each of the digits he saw could actually 
# be another adjacent digit (horizontally or vertically, but not diagonally). 
# E.g. instead of the 1 it could also be the 2 or 4. And instead of the 5 it could also be the 2, 4, 6 or 8.

# He also mentioned, he knows this kind of locks. You can enter an unlimited amount of wrong PINs, 
# they never finally lock the system or sound the alarm. That's why we can try out all possible (*) variations.

# * possible in sense of: the observed PIN itself and all variations considering the adjacent digits



def get_pins(observed):
    keyboard = {
        '1': '124',
        '2': '1235',
        '3': '236',
        '4': '1457',
        '5': '24568',
        '6': '3569',
        '7': '478',
        '8': '57890',
        '9': '689',
        '0': '80'
    }
    possible = [keyboard[p] for p in observed]
    possible.extend((8 - len(observed)) * 'x')
    result = []
    for a in possible[0]:
        for b in possible[1]:
            for c in possible[2]:
                for d in possible[3]:
                    for e in possible[4]:
                        for f in possible[5]:
                            for g in possible[6]:
                                for h in possible[7]:
                                    result.append(''.join(x for x in (a, b, c, d, e, f, g, h) if x is not 'x'))
    return result