# Your task is to implement a function that calculates an election winner from a list of voter selections using 
# an 
# Instant Runoff Voting algorithm. If you haven't heard of IRV, here's a basic overview (slightly altered for this kata):

# Each voter selects several candidates in order of preference.
# The votes are tallied from the each voter's first choice.
# If the first-place candidate has more than half the total votes, they win.
# Otherwise, find the candidate who got the least votes and remove them from each person's voting list.
# In case of a tie for least, remove all of the tying candidates.
# In case of a complete tie between every candidate, return nil(Ruby)/None(Python)/undefined(JS).
# Start over.

# Continue until somebody has more than half the votes; they are the winner.
# Your function will be given a list of voter ballots; each ballot will be a list of candidates (symbols) 
# in descending order of preference. You should return the symbol corresponding to the winning candidate. 


def runoff(voters):
    while True:
        winners = [vote[0] for vote in voters]
        results = [(i, winners.count(i)) for i in voters[0]]
        votes = tuple(c[1] for c in results)
        ma = max(results, key=lambda x: x[1])
        mi = min(results, key=lambda x: x[1])
        if len(set(votes)) == 1 and len(votes) != 1:
            return None
        if ma[1] >= sum(votes)/2:
            return ma[0]
        for m in (i[0] for i in results if i[1] == mi[1]):
            for i in range(len(voters)):
                voters[i].remove(m)