# Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. 
# You don't need to validate the form of the Roman numeral.

# Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, 
# starting with the leftmost digit and skipping any 0s. 
# So 1990 is rendered "MCMXC" (1000 = M, 900 = CM, 90 = XC) and 2008 is rendered "MMVIII" (2000 = MM, 8 = VIII). 
# The Roman numeral for 1666, "MDCLXVI", uses each letter in descending order.

# Example:

# solution('XXI') # should return 21


NUMBERS = {
    'I': 1,
    'V': 5,
    'X': 10,
    'L': 50,
    'C': 100,
    'D': 500,
    'M': 1000
}

ADJUST = {
    ('IV', 'IX', 'IL', 'IC', 'ID', 'IM'): -2,
    ('XL', 'XC', 'XD', 'XM'): -20,
    ('CD', 'CM'): -200
}

def solution(roman):
    res = 0
    for x in range(len(roman)):
        res += NUMBERS[roman[x]]
    for x in ADJUST.keys():
        for y in x:
            if y in roman:
                res += ADJUST[x]
    return res