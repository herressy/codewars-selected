# Be u(n) a sequence beginning with:

# u[1]  = 1,  u[2]  = 1,  u[3]  = 2,  u[4]  = 3,  u[5]  = 3,  u[6] = 4,

# u[7]  = 5,  u[8]  = 5,  u[9]  = 6,  u[10] = 6,  u[11] = 6,  u[12] = 8,

# u[13] = 8,  u[14] = 8,  u[15] = 10, u[16] = 9,  u[17] = 10, u[18] = 11,

# u[19] = 11, u[20] = 12, u[21] = 12, u[22] = 12, u[23] = 12 etc...
# How isu[8] calculated?
# We have u[7] = 5 and u[6] = 4. These numbers tell us that we have to go backwards from 
# index 8 to index 8 - 5 = 3 and to index 8 - 4 = 4 so to index 3 and 4.

# u[3] = 2 and u[4] = 3 hence u[8] = u[3] + u[4] = 2 + 3 = 5.

# Another example: let us calculate u[13]. At indexes 12 and 11 we have 8 and 6. 
# Going backwards of 8 and 6 from 13 we get indexes 13 - 8 = 5 and 13 - 6 = 7.


def nums(n):
    cache = {
        1: 1,
        2: 1,
        3: 2
    }
    for i in range(3, n+1):
        cache[i] = cache[i-cache[i-1]] + cache[i-cache[i-2]]
    return cache.values()

def length_sup_u_k(n, k):
    return sum(1 for x in nums(n) if x >= k)

def comp(n):
    c = tuple(nums(n))
    return sum(1 for x in range(1, len(c)) if c[x-1] > c[x])