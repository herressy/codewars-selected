# Create a Vector object that supports addition, subtraction, dot products, and norms. So, for example:

# a = Vector([1, 2, 3])
# b = Vector([3, 4, 5])
# c = Vector([5, 6, 7, 8])

# a.add(b)      # should return a new Vector([4, 6, 8])
# a.subtract(b) # should return a new Vector([-2, -2, -2])
# a.dot(b)      # should return 1*3 + 2*4 + 3*5 = 26
# a.norm()      # should return sqrt(1^2 + 2^2 + 3^2) = sqrt(14)
# a.add(c)      # raises an exception

# If you try to add, subtract, or dot two vectors with different lengths, you must throw an error!

# Also provide:

## a toString method, so that using the vectors from above, a.toString() === '(1,2,3)' 
# (in Python, this is a __str__ method, so that str(a) == '(1,2,3)')

## an equals method, to check that two vectors that have the same components are equal

# Note: the test cases will utilize the user-provided equals method.


import numpy as np

class Vector:
    def __init__(self, arr):
        self.arr = list(arr)
        
    def add(self, b):
        result = list(np.add(self.arr, b.arr))
        return Vector(result)
    
    def subtract(self, b):
        result = list(np.subtract(self.arr, b.arr))
        return Vector(result)
    
    def dot(self, b):
        return sum(list(np.multiply(self.arr, b.arr)))
        return Vector(result)
    
    def norm(self):
        return (sum(x*x for x in self.arr))**0.5
    
    def equals(self, b):
        return self.arr == b.arr
    
    def toString(self):
        return
        
    def __str__(self):
        return str(tuple(self.arr)).replace(' ', '')