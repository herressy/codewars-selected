# 1, 246, 2, 123, 3, 82, 6, 41 are the divisors of number 246. Squaring these divisors we get: 
# 1, 60516, 4, 15129, 9, 6724, 36, 1681. The sum of these squares is 84100 which is 290 * 290.

# Task
# Find all integers between m and n (m and n integers with 1 <= m <= n) such that the 
# sum of their squared divisors is itself a square.

# We will return an array of subarrays or of tuples (in C an array of Pair) or a string. 
# The subarrays (or tuples or Pairs) will have two elements: 
# first the number the squared divisors of which is a square and then the sum of the squared divisors.

# Example:
# list_squared(1, 250) --> [[1, 1], [42, 2500], [246, 84100]]
# list_squared(42, 250) --> [[42, 2500], [246, 84100]]


def is_square(i: int):
    return (i**0.5).is_integer()

def sum_divisors(i: int):
    s = set(x for x in range(1, int(i**0.5)+1) if not i % x)
    return sum(z**2 for z in (s.union(set(i / x for x in s))))

def list_squared(m, n):
    return [[x, sum_divisors(x)] for x in range (m, n) if is_square(sum_divisors(x))]