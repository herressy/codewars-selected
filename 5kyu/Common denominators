# Common denominators

# You will have a list of rationals in the form

# { {numer_1, denom_1} , ... {numer_n, denom_n} } 
# or
# [ [numer_1, denom_1] , ... [numer_n, denom_n] ] 
# or
# [ (numer_1, denom_1) , ... (numer_n, denom_n) ]

# where all numbers are positive ints. You have to produce a result in the form:

# (N_1, D) ... (N_n, D) 
# or
# [ [N_1, D] ... [N_n, D] ] 
# or
# [ (N_1', D) , ... (N_n, D) ] 
# or
# {{N_1, D} ... {N_n, D}} 
# or
# "(N_1, D) ... (N_n, D)"

# depending on the language (See Example tests) in which D is as small as possible and

# N_1/D == numer_1/denom_1 ... N_n/D == numer_n,/denom_n.


from functools import reduce
from fractions import gcd

def convertFracts(lst):
    if not lst:
        return []
    lcm = lambda x, y: x*y//gcd(x, y)
    D = reduce(lcm, (d for _, d in lst))
    return [[n*D//d, D] for n, d in lst]