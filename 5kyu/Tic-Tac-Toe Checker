# If we were to set up a Tic-Tac-Toe game, we would want to know whether the board's current state is solved, wouldn't we? 
# Our goal is to create a function that will check that for us!

# Assume that the board comes in the form of a 3x3 array, where the value is 0 if a spot is empty, 
# 1 if it is an "X", or 2 if it is an "O", like so:

# [[0, 0, 1],
#  [0, 1, 2],
#  [2, 1, 0]]

# We want our function to return:

# -1 if the board is not yet finished AND no one has won yet (there are empty spots),
# 1 if "X" won,
# 2 if "O" won,
# 0 if it's a cat's game (i.e. a draw).
# You may assume that the board passed in is valid in the context of a game of Tic-Tac-Toe.


import numpy

def x_won(board):
    if [1, 1, 1] in board.tolist():
        return True
    if [1, 1, 1] in board.transpose().tolist():
        return True
    if [1, 1, 1] in board.diagonal().tolist():
        return True
    return False

def o_won(board):
    if [2, 2, 2] in board.tolist():
        return True
    if [2, 2, 2] in board.transpose().tolist():
        return True
    if [2, 2, 2] in board.diagonal().tolist():
        return True
    return False

def is_solved(board):
    B = numpy.matrix(board)
    if x_won(B):
        return 1
    elif o_won(B):
        return 2
    for line in board:
        if 0 in line:
            return - 1
    return 0