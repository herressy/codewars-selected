# Sort these integers for me ...

# By name ...

# Do it now !

# Range is 0-999

# There may be duplicates

# The array may be empty

# Example
# Input: 1, 2, 3, 4
# Equivalent names: "one", "two", "three", "four"
# Sorted by name: "four", "one", "three", "two"
# Output: 4, 1, 3, 2
# Notes
# Don't pack words together:
# e.g. 99 may be "ninety nine" or "ninety-nine"; but not "ninetynine"
# e.g 101 may be "one hundred one" or "one hundred and one"; but not "onehundredone"
# Don't fret about formatting rules, because if rules are consistently applied it has no effect anyway:
# e.g. "one hundred one", "one hundred two"; is same order as "one hundred and one", "one hundred and two"
# e.g. "ninety eight", "ninety nine"; is same order as "ninety-eight", "ninety-nine"


TENS = {30: 'thirty', 40: 'forty', 50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety'}
ZERO_TO_TWENTY = (
    'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'
)

def number_to_english(n):
    if any(not x.isdigit() for x in str(n)):
        return ''
    if n <= 20:
        return ZERO_TO_TWENTY[n]
    elif n < 100 and n % 10 == 0:
        return TENS[n]
    elif n < 100:
        return number_to_english(n - (n % 10)) + ' ' + number_to_english(n % 10)
    elif n < 1000 and n % 100 == 0:
        return number_to_english(n // 100) + ' hundred'
    elif n < 1000:
        return number_to_english(n // 100) + ' hundred ' + number_to_english(n % 100)

def sort_by_name(arr):
    return sorted(arr, key=number_to_english)